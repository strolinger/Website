# 1) Install Playwright Chromium once in the job
- name: Install Playwright (Chromium)
  run: npx playwright install --with-deps chromium

# 2) Snapshot Finviz heatmap -> docs/snapshots/heatmap-snapshot.png
- name: Snapshot Finviz heatmap → docs/snapshots/heatmap-snapshot.png
  shell: bash
  run: |
    node - <<'JS'
    const fs = require('fs');
    const path = require('path');
    const { chromium } = require('playwright');

    (async () => {
      const outDir = path.join('docs', 'snapshots');
      const outFile = path.join(outDir, 'heatmap-snapshot.png');
      fs.mkdirSync(outDir, { recursive: true });

      const browser = await chromium.launch({
        headless: true,
        args: ['--no-sandbox','--disable-setuid-sandbox']
      });
      const ctx = await browser.newContext({
        viewport: { width: 1600, height: 1100 },
        userAgent:
          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123 Safari/537.36'
      });
      const page = await ctx.newPage();

      // Block noisy ad/analytics calls that keep network “busy”
      await ctx.route('**/*', (route) => {
        const u = route.request().url();
        const block = [
          'doubleclick', 'googlesyndication', 'googletagmanager',
          'adservice.google', 'analytics', 'scorecardresearch', 'facebook'
        ].some(s => u.includes(s));
        if (block) return route.abort();
        return route.continue();
      });

      const url = 'https://finviz.com/map.ashx'; // heat map
      try {
        // Don’t wait for networkidle—Finviz rarely goes idle
        await page.goto(url, { waitUntil: 'load', timeout: 120000 });

        // If a cookie/consent appears, accept it
        try {
          const btn = await page.waitForSelector(
            'button:has-text("Agree"), button:has-text("I Agree"), #onetrust-accept-btn-handler',
            { timeout: 5000 }
          );
          if (btn) await btn.click();
        } catch {}

        // Wait for something that looks like the map
        // (use a broad set of selectors to be resilient to DOM changes)
        const sel = [
          'canvas',               // current interactive map layer
          'img[src*="map.ashx"]', // static fallback if they ever switch
          '.f-map', '.map', '#map', '#root'
        ].join(', ');
        await page.waitForSelector(sel, { timeout: 60000 });

        // Give the map a moment to finish animating/prerendering
        await page.waitForTimeout(2500);

        // Full-page screenshot so the whole map is captured
        await page.screenshot({ path: outFile, fullPage: true });

        console.log('Wrote:', outFile);
        await browser.close();
      } catch (err) {
        console.error('Heatmap snapshot failed:', err);
        await browser.close();
        process.exit(1);
      }
    })();
    JS

- name: Commit updated snapshot
  run: |
    git config user.name  "github-actions[bot]"
    git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
    git add docs/snapshots/heatmap-snapshot.png
    git commit -m "Update heatmap snapshot" || echo "No changes"
    git push
